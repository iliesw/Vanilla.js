import { parse } from 'node-html-parser';
import fs from 'fs';
class Dom {
    constructor(data) {
        this.root = parse(data)
        this.Marker = "Vanilla-Replaced"

    }
    HTML() {
        return this.root.toString()
    }
    CSS() {
        return this.root.querySelector('style').toString()
    }


    Replace(Component, data) {
        const Instances = this.root.getElementsByTagName(Component).filter(instance => !instance.getAttribute(this.Marker));
        // console.log(Component, Instances.length);
        if (Instances.length == 0) return;
        for (const instance of Instances) {
            instance.setAttribute(this.Marker, "true"); //set the replaced attribute to avoid infinite loops
            const Attributes = instance.attributes;
            const innerHTML = instance.innerHTML;
            const newInstance = parse(data).childNodes[0];
            var str = newInstance.toString();
            const KeystoReplace = str.match(/{(.*?)}/g)?.map(key => key.slice(1, -1)) || []; //get the keys to replace
            const Remaining = Object.keys(Attributes).filter(key => !KeystoReplace.includes(key)); //get the remaining attributes
            newInstance.innerHTML += innerHTML; //add the innerHTML back
            str = newInstance.toString();
            //replace the keys with the attributes
            for (const key of KeystoReplace) {
                if (Attributes[key] !== undefined) {
                    str = str.replace(`{${key}}`, Attributes[key]);
                }
            }

            // add the remaining attributes back

            const final = parse(str).childNodes[0];
            for (const key of Remaining) {
                final.setAttribute(key, Attributes[key]);
            }

            // Add Data-Properties
            // final.setAttribute(`data-props`, JSON.stringify(Attributes));

            //replace the instance with the new one
            instance.replaceWith(final)
        }
    }

    RemoveMarker() {
        this.root.querySelectorAll(`*[${this.Marker}=true]`).forEach(element => element.removeAttribute(this.Marker));
    }

    AddHead(data) {
        this.root.querySelector('head').innerHTML += data;
    }

    ReplaceAll(Map) {
        let str = this.HTML();
        do {
            for (const [key, value] of Object.entries(Map)) {
                this.Replace(key, value);
            }
            const newStr = this.HTML();
            if (str === newStr) break; // Break if no changes were made
            str = newStr; // Update str for next iteration
        } while (true);
        this.RemoveMarker();

    }
    inject(script) {
        this.root.querySelector('body').innerHTML += script;
    }
}

export { Dom };

