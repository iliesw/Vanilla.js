import { file } from 'bun';
import { readdir } from "node:fs/promises";
import { watch } from 'fs';
import { Dom } from './Dom.js';

var devClient = null;
var PagesPath = "./Frontend/Pages/";
var ComponentsPath = "./Frontend/Components/";
var AssetsPath = "./Frontend/Assets/";
var ComponentsCache = {};
var PagesCache = {};
let debounceTimer;
var port = -1;

export function setPort(p) {
    port = p;
}

export function setAssetsPath(path) {
    AssetsPath = path;
}

export function setComponentsPath(path) {
    ComponentsPath = path;
}

export function setPagesPath(path) {
    PagesPath = path;
}


export function setDevClient(client) {
    devClient = client;
}

export async function RefreshComponents() {
    ComponentsCache = {};
    var files = await readdir(ComponentsPath, { recursive: true })
    files = files.filter(file => file.endsWith(".html"));
    for (const file of files) {
        var name = file.split(".")[0];
        if (name.includes("\\")) name = name.split("\\").pop();
        ComponentsCache[name] = await Bun.file(ComponentsPath + file).text();
    }

}


export async function RefreshPages() {
    PagesCache = {};
    const files = await readdir(PagesPath);
    for (const file of files) {
        PagesCache[file.split(".")[0]] = await Bun.file(PagesPath + file).text();
    }
}

watch(AssetsPath, { recursive: true }, (eventType, filename) => {
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(async () => {
        if (filename && devClient) {
            devClient.send('reload');
        }
    }, 500); // 500ms debounce
});


watch(ComponentsPath, { recursive: true }, (eventType, filename) => {
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(async () => {
        if (filename && devClient) {
            await RefreshComponents();
            devClient.send('reload');
        }
    }, 500); // 500ms debounce
});

watch(PagesPath, { recursive: true }, (eventType, filename) => {
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(async () => {
        if (filename && devClient) {
            await RefreshPages();
            devClient.send('reload');
        }
    }, 500); // 500ms debounce
});


export async function RenderPage(Name) {
    const contentString = PagesCache[Name]
    const dom = new Dom(contentString);
    dom.AddHead(`
        <link rel="stylesheet" href="${AssetsPath}/Css/Glow.css">
        <link rel="stylesheet" href="${AssetsPath}/Css/Fonts.css">
        `)
    dom.inject(await GetClient());
    dom.inject(await GetHelpers());
    // if (port != -1) {
    //     dom.inject(GetHotReloadScript());
    // }
    dom.ReplaceAll(ComponentsCache);
    return new Response(dom.HTML(), {
        status: 200,
        headers: { 'Content-Type': 'text/html' }
    });
}


export function GetComponents() {
    return JSON.stringify(ComponentsCache);
}


export async function GetClient() {
    const thisPath = __dirname;
    const client = await Bun.file(thisPath + "/ClientImproved.js").text();
    return `
    <script Vanilla>${client}</script>
    `;
}

export async function GetHelpers() {
    const thisPath = __dirname;
    const helpers = await Bun.file(thisPath + "/Helpers.js").text();
    return `
    <script Vanilla:Helpers>${helpers}</script>
    `;
}
