import { file } from 'bun';
import { readdir } from "node:fs/promises";
import { watch } from 'fs';
import { Dom } from './Dom.js';

var devClient = null;
var PagesPath = "./Frontend/Pages/";
var ComponentsPath = "./Frontend/Components/";
var AssetsPath = "./Frontend/Assets/";
var ViewsPath = "./Frontend/Views/";
var ComponentsCache = {};
let debounceTimer;
var port = -1;

export function setPort(p) {
    port = p;
}

export function setViewsPath(path) {
    ViewsPath = path;
}

export function setAssetsPath(path) {
    AssetsPath = path;
}

export function setComponentsPath(path) {
    ComponentsPath = path;
}

export function setPagesPath(path) {
    PagesPath = path;
}


export function setDevClient(client) {
    devClient = client;
}

export async function RefreshComponents() {
    ComponentsCache = {};
    const files = await readdir(ComponentsPath);
    for (const file of files) {
        const name = file.split(".")[0];
        const content = await Bun.file(ComponentsPath + name + ".html").text();
        ComponentsCache[name] = content;
    }
    PostProcessCss()
}

function PostProcessCss() {

    for (const [key, value] of Object.entries(ComponentsCache)) {
        const css = value.match(/<style>([\s\S]*?)<\/style>/)?.[1];
        const newCss = css.replace(/attr\((.*?)\)/g, "{{$1}}");
        ComponentsCache[key] = ComponentsCache[key].replace(css, newCss);
    }
}



// Watch the Frontend directory for changes
watch(ComponentsPath, { recursive: true }, (eventType, filename) => {
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(async () => {
        if (filename && devClient) {
            await RefreshComponents();
            devClient.send('reload');
        }
    }, 500); // 500ms debounce
});

watch(PagesPath, { recursive: true }, (eventType, filename) => {
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(async () => {
        if (filename && devClient) {
            devClient.send('reload');
        }
    }, 500); // 500ms debounce
});

watch(ViewsPath, { recursive: true }, (eventType, filename) => {
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(async () => {
        if (filename && devClient) {
            devClient.send('reload');
        }
    }, 500); // 500ms debounce
});

export async function RenderPage(Name) {
    const contentString = await Bun.file(PagesPath + Name + ".html").text();
    const dom = new Dom(contentString);
    if (port != -1) {
        dom.inject(GetHotReloadScript());
    }
    dom.AddHead(`
            <link rel="stylesheet" href="${AssetsPath}/Css/Glow.css">
            <link rel="stylesheet" href="${AssetsPath}/Css/Fonts.css">
    `)
    // dom.inject(GetClient());
    dom.ReplaceAll(ComponentsCache);
    return new Response(dom.HTML(), {
        status: 200,
        headers: { 'Content-Type': 'text/html' }
    });
}

export async function RenderView(Name) {
    const contentString = await Bun.file(ViewsPath + Name + ".html").text();
    const dom = new Dom(contentString);
    return new Response(dom.HTML(), {
        status: 200,
        headers: { 'Content-Type': 'text/html' }
    });
}


function GetHotReloadScript() {
    return `
    <script HotReload>
        const ws = new WebSocket('ws://localhost:${port}');
        ws.onmessage = (event) => {
            if (event.data === 'reload') {
                window.location.reload();
            }
        };
        ws.onopen = () => console.log('Connected to hot reload');
        ws.onclose = () => console.log('Disconnected from hot reload');
    </script>
`;
}

export function GetClient() {
    return `
    <script Vanilla>
        window.onload = () => {
            for (const view of document.getElementsByTagName("View")) {
                LoadView(view.getAttribute("src"), view);
    }

    // Monitor DOM changes
    const observer = new MutationObserver(() => onChange());

    observer.observe(document.body, {
        childList: true, // Detect added or removed elements
        subtree: true,   // Monitor the whole DOM tree
    });
};

function onChange() {
    for (const view of document.getElementsByTagName("View")) {
        if (view.hasAttribute("src")) {
            LoadView(view.getAttribute("src"), view);
        }
    }
}

function LoadView(view, element) {
    fetch("/Vanilla/Views/" + view)
        .then(response => response.text())
        .then(data => {
            element.replaceWith(new DOMParser().parseFromString(data, "text/html").body.firstElementChild);
        });
}</script>

    `;
}
